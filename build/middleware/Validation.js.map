{"version":3,"sources":["../../server/middleware/Validation.js"],"names":["Validation","checkUserInput","req","res","next","userNameError","assert","equals","body","password","checkBody","username","notEmpty","isLength","options","min","errorMessage","email","isEmail","errors","validationErrors","allErrors","forEach","error","push","msg","status","json","sendUserInput","toLowerCase","findOne","$or","then","user","send","message","hashSync","userInput","fullName","checkArticleId","querier","articleId","checkArticleInput","articleError","title","content","sendArticleInput","_id","article","author","decoded","currentUser"],"mappings":"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","file":"Validation.js","sourcesContent":["import bcrypt from 'bcrypt';\nimport omit from 'lodash/omit';\n\nimport mongoose from 'mongoose';\n\nimport User from '../models/User';\nimport Article from '../models/Article';\n\nconst Validation = {\n\t/**\n   *\n   * @description - Validates Article Input\n   *\n   * @param {Object} req - request\n   *\n   * @param {Object} res - response\n   *\n   * @param {Object} next - call back function\n   *\n   * @returns {Object} - Object containing error message\n   */\n\tcheckUserInput(req, res, next) {\n\t\tlet userNameError = '';\n\t\tuserNameError = 'Please provide a username with atleast 4 characters.';\n\t\treq.assert('passwordConfirm', 'Passwords must match').equals(req.body.password);\n\n\t\treq.checkBody({\n\t\t\tusername: {\n\t\t\t\tnotEmpty: true,\n\t\t\t\tisLength: {\n\t\t\t\t\toptions: [{ min: 4 }],\n\t\t\t\t\terrorMessage: userNameError\n\t\t\t\t},\n\t\t\t\terrorMessage: 'Your Username is required'\n\t\t\t},\n\t\t\temail: {\n\t\t\t\tnotEmpty: true,\n\t\t\t\tisEmail: {\n\t\t\t\t\terrorMessage: 'Provide a valid a Email Adrress'\n\t\t\t\t},\n\t\t\t\terrorMessage: 'Your Email Address is required'\n\t\t\t},\n\t\t\tpassword: {\n\t\t\t\tnotEmpty: true,\n\t\t\t\tisLength: {\n\t\t\t\t\toptions: [{ min: 4 }],\n\t\t\t\t\terrorMessage: 'Provide a valid password with minimum of 4 characters'\n\t\t\t\t},\n\t\t\t\terrorMessage: 'Your Password is required'\n\t\t\t}\n\t\t});\n\t\tconst errors = req.validationErrors();\n\t\tif (errors) {\n\t\t\tconst allErrors = [];\n\t\t\terrors.forEach((error) => {\n\t\t\t\tallErrors.push({\n\t\t\t\t\terror: error.msg\n\t\t\t\t});\n\t\t\t});\n\t\t\treturn res.status(400).json(allErrors);\n\t\t}\n\t\tnext();\n\t},\n\n\t/**\n   * Sends user input to the create account controller\n   *\n   * @param {Object} req - request\n   *\n   * @param {Object} res - response\n   *\n   * @param {Object} next - Callback function\n   *\n   * @returns {Object} - Object containing user information\n   */\n\tsendUserInput(req, res, next) {\n\t\tconst username = req.body.username.toLowerCase();\n\n\t\treturn User.findOne({\n\t\t\t$or: [{ username }, { email: req.body.email }]\n\t\t}).then((user) => {\n\t\t\tif (user) {\n\t\t\t\tif (user.email === req.body.email) {\n\t\t\t\t\treturn res.status(409).send({\n\t\t\t\t\t\tmessage: 'Email already exist'\n\t\t\t\t\t});\n\t\t\t\t} else if (user.username === req.body.username) {\n\t\t\t\t\treturn res.status(409).send({\n\t\t\t\t\t\tmessage: 'Username already exist'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst password = bcrypt.hashSync(req.body.password, 10);\n\t\t\t\treq.userInput = {\n\t\t\t\t\tusername,\n\t\t\t\t\tfullName: req.body.fullName,\n\t\t\t\t\temail: req.body.email,\n\t\t\t\t\tpassword\n\t\t\t\t};\n\t\t\t\tnext();\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n * Checks if article id is a number\n *\n * @param {Object} req - request\n *\n * @param {Object} res - response\n *\n * @param {Function} next - Call back function\n *\n * @returns { Object } - containing error message\n */\n\tcheckArticleId(req, res, next) {\n\t\tconst querier = req.body.articleId;\n\t\tif (!querier) {\n\t\t\treturn res.status(400).send({\n\t\t\t\tmessage: 'Article ID is required'\n\t\t\t});\n\t\t}\n\t\tnext();\n\t},\n\n\t/**\n   *\n   * @description - Validates User Input when adding a new article\n   *\n   * @param {Object} req - request\n   *\n   * @param {Object} res - response\n   *\n   * @param {Object} next - call back function\n   *\n   * @returns {Object} - Object containing error message\n   */\n\tcheckArticleInput(req, res, next) {\n\t\tconst articleError = 'Please provide an article title with 5 characters and above';\n\t\treq.checkBody({\n\t\t\ttitle: {\n\t\t\t\tnotEmpty: true,\n\t\t\t\tisLength: {\n\t\t\t\t\toptions: [{ min: 5 }],\n\t\t\t\t\terrorMessage: articleError\n\t\t\t\t},\n\t\t\t\terrorMessage: 'Article title is required'\n\t\t\t},\n\t\t\tcontent: {\n\t\t\t\tnotEmpty: true,\n\t\t\t\terrorMessage: 'Article content is required'\n\t\t\t}\n\t\t});\n\t\tconst errors = req.validationErrors();\n\t\tif (errors) {\n\t\t\tconst allErrors = [];\n\t\t\terrors.forEach((error) => {\n\t\t\t\tconst errorMessage = error.msg;\n\t\t\t\tallErrors.push(errorMessage);\n\t\t\t});\n\t\t\treturn res.status(400).json({\n\t\t\t\tmessage: allErrors[0]\n\t\t\t});\n\t\t}\n\t\tnext();\n\t},\n\n\t/**\n   * Sends user input to the add article controller\n   *\n   * @param {Object} req - request\n   *\n   * @param {Object} res - response\n   *\n   * @param {Object} next - Callback function\n   *\n   * @returns {Object} - Object containing article inout\n   */\n\tsendArticleInput(req, res, next) {\n\t\tconst { title, content, _id } = req.body;\n\n\t\treq.article = {\n\t\t\t_id,\n\t\t\ttitle,\n\t\t\tcontent,\n\t\t\tauthor: req.decoded.currentUser.username\n\t\t};\n\t\tnext();\n\t}\n};\n\nexport default Validation;\n"]}