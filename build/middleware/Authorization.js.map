{"version":3,"sources":["../../server/middleware/Authorization.js"],"names":["load","key","process","env","secretKey","Authorization","isLoggedIn","req","res","next","token","tokenAvailable","headers","authorization","split","verify","error","decoded","status","send","message","isAdmin","decodedToken","currentUser"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,iBAAOA,IAAP;;AAEA,IAAMC,MAAMC,QAAQC,GAAR,CAAYC,SAAxB;;AAEA,IAAMC,gBAAgB;AACrB;;;;;;;;;;;AAWAC,WAZqB,sBAYVC,GAZU,EAYLC,GAZK,EAYAC,IAZA,EAYM;AAC1B,MAAIC,cAAJ;AACA,MAAMC,iBAAiBJ,IAAIK,OAAJ,CAAYC,aAAZ,IAA6BN,IAAIK,OAAJ,CAAY,gBAAZ,CAApD;;AAEA,MAAIL,IAAIK,OAAJ,CAAYC,aAAhB,EAA+B;AAAA,+BAChBN,IAAIK,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,CADgB;;AAAA;;AAC1BJ,QAD0B;AAE9B,GAFD,MAEO;AACNA,WAAQC,cAAR;AACA;AACD,MAAID,KAAJ,EAAW;AACV,0BAAIK,MAAJ,CAAWL,KAAX,EAAkBT,GAAlB,EAAuB,UAACe,KAAD,EAAQC,OAAR,EAAoB;AAC1C,QAAID,KAAJ,EAAW;AACVR,SAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACpBC,eAAS,8BADW;AAEpBJ;AAFoB,MAArB;AAIA,KALD,MAKO;AACNT,SAAIU,OAAJ,GAAcA,OAAd;AACAR;AACA;AACD,IAVD;AAWA,GAZD,MAYO;AACN,UAAOD,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BC,aAAS;AADkB,IAArB,CAAP;AAGA;AACD,EAtCoB;;;AAwCrB;;;;;;;;;;;AAWAC,QAnDqB,mBAmDbd,GAnDa,EAmDRC,GAnDQ,EAmDHC,IAnDG,EAmDG;AACvB,MAAMa,eAAef,IAAIU,OAAzB;AACA,MAAIK,aAAaC,WAAb,CAAyBF,OAA7B,EAAsC;AACrCZ;AACA,GAFD,MAEO;AACN,UAAOD,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BC,aAAS;AADkB,IAArB,CAAP;AAGA;AACD;AA5DoB,CAAtB;;kBA+Def,a","file":"Authorization.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport dotenv from 'dotenv';\nimport User from '../models/User';\n\ndotenv.load();\n\nconst key = process.env.secretKey;\n\nconst Authorization = {\n\t/**\n   * @description - Checks if logged in user has valid AUTH token\n   *\n   * @param  {Object} req - request\n   *\n   * @param  {object} res - response\n   *\n   * @param {Object} next - Call back function\n   *\n   * @return {null} - null\n   */\n\tisLoggedIn(req, res, next) {\n\t\tlet token;\n\t\tconst tokenAvailable = req.headers.authorization || req.headers['x-access-token'];\n\n\t\tif (req.headers.authorization) {\n\t\t\t[ , token ] = req.headers.authorization.split(' ');\n\t\t} else {\n\t\t\ttoken = tokenAvailable;\n\t\t}\n\t\tif (token) {\n\t\t\tjwt.verify(token, key, (error, decoded) => {\n\t\t\t\tif (error) {\n\t\t\t\t\tres.status(401).send({\n\t\t\t\t\t\tmessage: 'Failed to Authenticate Token',\n\t\t\t\t\t\terror\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treq.decoded = decoded;\n\t\t\t\t\tnext();\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\treturn res.status(401).send({\n\t\t\t\tmessage: 'Access denied, Authentication token does not exist'\n\t\t\t});\n\t\t}\n\t},\n\n\t/**\n   * @description - Checks if currently logged in user is an admin\n   *\n   * @param  {Object} req - request\n   *\n   * @param  {object} res - response\n   *\n   * @param {Object} next - Call back function\n   *\n   * @return {Object} - Object containing message\n   */\n\tisAdmin(req, res, next) {\n\t\tconst decodedToken = req.decoded;\n\t\tif (decodedToken.currentUser.isAdmin) {\n\t\t\tnext();\n\t\t} else {\n\t\t\treturn res.status(403).send({\n\t\t\t\tmessage: 'You do not have permission to perform that operation'\n\t\t\t});\n\t\t}\n\t}\n};\n\nexport default Authorization;\n"]}