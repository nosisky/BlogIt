{"version":3,"sources":["../../server/controllers/UserController.js"],"names":["load","secret","process","env","secretKey","UserController","create","req","res","newUser","userInput","save","then","user","currentUser","toObject","token","sign","exp","Math","floor","Date","now","status","send","message","catch","error","login","body","username","password","json","toLowerCase","findOne","compareSync"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,iBAAOA,IAAP;;AAEA,IAAMC,SAASC,QAAQC,GAAR,CAAYC,SAA3B;;AAEA,IAAMC,iBAAiB;AACtB;;;;;;;;;;;AAWAC,OAZsB,kBAYfC,GAZe,EAYVC,GAZU,EAYL;AAChB,MAAMC,UAAU,mBAASF,IAAIG,SAAb,CAAhB;AACAD,UACEE,IADF,CACOJ,IAAIG,SADX,EAEEE,IAFF,CAEO,UAACC,IAAD,EAAU;AACf,OAAMC,cAAc,oBAAKD,KAAKE,QAAL,EAAL,EAAsB,CAAE,UAAF,EAAc,aAAd,CAAtB,CAApB;AACA,OAAMC,QAAQ,uBAAIC,IAAJ,CACb;AACCH,4BADD;AAECI,SAAKC,KAAKC,KAAL,CAAWC,KAAKC,GAAL,KAAa,IAAxB,IAAgC,KAAK,EAAL,GAAU;AAFhD,IADa,EAKbrB,MALa,CAAd;AAOA,UAAOO,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BC,aAAS,wBADkB;AAE3BT;AAF2B,IAArB,CAAP;AAIA,GAfF,EAgBEU,KAhBF,CAgBQ,UAACC,KAAD,EAAW;AACjBnB,OAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACpBG;AADoB,IAArB;AAGA,GApBF;AAqBA,EAnCqB;;;AAqCtB;;;;;;;;;;;AAWAC,MAhDsB,iBAgDhBrB,GAhDgB,EAgDXC,GAhDW,EAgDN;AACf,MAAI,CAACD,IAAIsB,IAAJ,CAASC,QAAV,IAAsB,CAACvB,IAAIsB,IAAJ,CAASE,QAApC,EAA8C;AAC7C,UAAOvB,IAAIe,MAAJ,CAAW,GAAX,EAAgBS,IAAhB,CAAqB;AAC3BP,aAAS;AADkB,IAArB,CAAP;AAGA;;AAED,MAAMK,WAAWvB,IAAIsB,IAAJ,CAASC,QAAT,CAAkBG,WAAlB,EAAjB;;AAEA,SAAO,eAAKC,OAAL,CAAa;AACnBJ;AADmB,GAAb,EAGLlB,IAHK,CAGA,UAACC,IAAD,EAAU;AACf,OAAIA,QAAQ,iBAAOsB,WAAP,CAAmB5B,IAAIsB,IAAJ,CAASE,QAA5B,EAAsClB,KAAKkB,QAA3C,CAAZ,EAAkE;AACjE,QAAMjB,cAAc,oBAAKD,KAAKE,QAAL,EAAL,EAAsB,CAAE,UAAF,EAAc,aAAd,CAAtB,CAApB;AACA,QAAMC,QAAQ,uBAAIC,IAAJ,CACb;AACCH,6BADD;AAECI,UAAKC,KAAKC,KAAL,CAAWC,KAAKC,GAAL,KAAa,IAAxB,IAAgC,KAAK,EAAL,GAAU;AAFhD,KADa,EAKbrB,MALa,CAAd;AAOA,WAAOO,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BC,cAAS,wBADkB;AAE3BT;AAF2B,KAArB,CAAP;AAIA;AACD,UAAOR,IAAIe,MAAJ,CAAW,GAAX,EAAgBS,IAAhB,CAAqB;AAC3BP,aAAS;AADkB,IAArB,CAAP;AAGA,GArBK,EAsBLC,KAtBK,CAsBC,UAACC,KAAD;AAAA,UAAWnB,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBG,KAArB,CAAX;AAAA,GAtBD,CAAP;AAuBA;AAhFqB,CAAvB;;kBAmFetB,c","file":"UserController.js","sourcesContent":["import dotenv from 'dotenv';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcrypt';\nimport omit from 'lodash/omit';\n\nimport User from '../models/User';\n\ndotenv.load();\n\nconst secret = process.env.secretKey;\n\nconst UserController = {\n\t/**\n   * @description - Adds a new user to the database\n   *\n   * @param  {object} req - request object\n   *\n   * @param  {object} res - response object\n   *\n   * @return {Object} - Object containing user detail\n   *\n   * Route: POST: /users/signup\n   */\n\tcreate(req, res) {\n\t\tconst newUser = new User(req.userInput);\n\t\tnewUser\n\t\t\t.save(req.userInput)\n\t\t\t.then((user) => {\n\t\t\t\tconst currentUser = omit(user.toObject(), [ 'password', 'createdDate' ]);\n\t\t\t\tconst token = jwt.sign(\n\t\t\t\t\t{\n\t\t\t\t\t\tcurrentUser,\n\t\t\t\t\t\texp: Math.floor(Date.now() / 1000) + 60 * 60 * 24\n\t\t\t\t\t},\n\t\t\t\t\tsecret\n\t\t\t\t);\n\t\t\t\treturn res.status(201).send({\n\t\t\t\t\tmessage: 'Signed up successfully',\n\t\t\t\t\ttoken\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tres.status(500).send({\n\t\t\t\t\terror\n\t\t\t\t});\n\t\t\t});\n\t},\n\n\t/**\n   * @description - Authenticates user login information\n   *\n   * @param  {object} req - request\n   *\n   * @param  {object} res - response\n   *\n   * @return {Object} - Object containing user details\n   *\n   * Route: POST: /users/signin\n   */\n\tlogin(req, res) {\n\t\tif (!req.body.username || !req.body.password) {\n\t\t\treturn res.status(401).json({\n\t\t\t\tmessage: 'Please provide your username or password to login'\n\t\t\t});\n\t\t}\n\n\t\tconst username = req.body.username.toLowerCase();\n\n\t\treturn User.findOne({\n\t\t\tusername\n\t\t})\n\t\t\t.then((user) => {\n\t\t\t\tif (user && bcrypt.compareSync(req.body.password, user.password)) {\n\t\t\t\t\tconst currentUser = omit(user.toObject(), [ 'password', 'createdDate' ]);\n\t\t\t\t\tconst token = jwt.sign(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentUser,\n\t\t\t\t\t\t\texp: Math.floor(Date.now() / 1000) + 60 * 60 * 24\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsecret\n\t\t\t\t\t);\n\t\t\t\t\treturn res.status(200).send({\n\t\t\t\t\t\tmessage: 'Logged In Successfully',\n\t\t\t\t\t\ttoken\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn res.status(401).json({\n\t\t\t\t\tmessage: 'Invalid Credentials.'\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch((error) => res.status(500).send(error));\n\t}\n};\n\nexport default UserController;\n"]}